name: Build and Push Docker Image

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  setup:
    name: Setup AWS Credentials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload Repository
        uses: actions/upload-artifact@v4
        with:
          name: repo-code
          path: .
          retention-days: 1

  build:
    name: Build Docker Image
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Repository
        uses: actions/download-artifact@v4
        with:
          name: repo-code
          path: .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:1.0 .

      - name: Save Docker image
        run: |
          docker save ${{ secrets.ECR_REPOSITORY_URI }}:1.0 > docker-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar
          retention-days: 1

  push:
    name: Push Docker Image to ECR
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: |
          docker load < docker-image.tar

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:1.0


  kubernetes-deploy:
    if: github.ref == 'refs/heads/master'
    name: "Deploy counter-service to Kubernetes"
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        shell: bash
        run: |
          curl -LO "https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Update kubeconfig
        run: |
          aws eks list-clusters --region eu-west-1
          aws eks update-kubeconfig --name "my-eks-cluster" --region eu-west-1
#          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Kubernetes
        run: |
          # Check if kubectl is configured correctly
          kubectl get nodes
          # Create NS if not exists 
          kubectl get namespace cybereason > /dev/null 2>&1 || kubectl create namespace cybereason
          # Apply the deployment
          kubectl apply -f deployment.yaml

      - name: Verify Deployment
        run: |
          kubectl get all -n cybereason
          deployment_name=$(grep -o 'name: [^[:space:]]*' deployment.yaml | head -1 | cut -d' ' -f2)
          kubectl rollout status deployment.apps/$deployment_name -n cybereason
